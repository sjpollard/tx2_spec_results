Switching to atp/3.11.7.
Switching to cce/11.0.4.
Switching to cray-libsci/20.09.1.
Switching to cray-mpich/7.7.17.
Switching to craype/2.7.7.
Switching to gcc/10.3.0.
Switching to modules/3.2.11.4.
Switching to perftools-base/21.05.0.
Switching to pmi/5.0.17.
allinea(281):ERROR:105: Unable to locate a modulefile for 'allinea'
cray-mpich/7.7.17(99):ERROR:102: Tcl command execution failed: if { [ info exists ::env($COMPILER_VERSION_STRING) ] } {
    set COMPILER_VERSION [join [lrange [split $::env($COMPILER_VERSION_STRING) .] 0 1] .]

    if { $COMPILER_VERSION_STRING == "CRAY_CC_VERSION" } {
        # CRAY_PE_USE_CLANG vaild only for cce 9.0 and beyond
        if { [expr $COMPILER_VERSION >= 9.0] && [ info exists ::env(CRAY_PE_USE_CLANG) ] } {
            set MPICH_COMPILER crayclang
        } else {
            set MPICH_COMPILER cray
        }
    }

    if { [ file isdirectory ${MPICH_NETDIR}/mpich-${MPICH_COMPILER} ] } {
        set BINDINGS [lsort -decreasing [glob -tails -directory ${MPICH_NETDIR}/mpich-${MPICH_COMPILER} -type d *.*]]
    } else {
        set BINDINGS 9999.999
    }

    foreach BINDING_VER $BINDINGS {
        if { [expr ${COMPILER_VERSION} >= $BINDING_VER]} {
            set BINDINGS_VERSION $BINDING_VER
            break
        }
    }
}

PrgEnv-allinea/6.0.6(99):ERROR:102: Tcl command execution failed: if {[info exists env(CRAY_PRGENVALLINEA)] && [module-info mode] == "load"}  {

  set kate 1
} else {

  setenv PE_ENV ALLINEA
  prepend-path PE_PRODUCT_LIST ALLINEA
  
  # Save the version of CrayPE and CCE if they are 
  # currently loaded.
  set craype_version_saved ""
  set craype_load_default 1
  if {[is-loaded craype]} {
    set craype_load_default 0
    catch {set craype_version_saved "/$env(CRAYPE_VERSION)"}
    set mod_list [lsearch -inline -not -all -exact $mod_list "craype"]
  }
  # On unload, we want to make sure the correct version
  # is getting removed.
  if {[module-info mode remove]} {
   catch {set craype_version_saved "/$env(CRAYPE_VERSION)"}
  }
  set allinea_version_saved ""
  set allinea_load_default 1
  if {[is-loaded allinea]} {
    set allinea_load_default 0
    set mod_list [lsearch -inline -not -all -exact $mod_list "allinea"]
    catch {set allinea_version_saved "/$env(ALLINEA_VERSION)"}
  }
  if {[module-info mode remove]} {
    catch {set allinea_version_saved "/$env(ALLINEA_VERSION)"}
  }

  # Unload 'mod_list'
  if {[module-info mode load] || [module-info mode switch1]} {
    foreach prod $mod_list {
      foreach path $mod_paths {
        if {[file exists $path/$prod]} {
          module unload ${prod}
          break
        }
      }
    }
  }
  
  # Load the compiler & craype, then remove them from the 'mod_list'
  if {$allinea_load_default} { 
    setenv allinea_already_loaded 0
    module load allinea$allinea_version_saved
  } else {
    setenv allinea_already_loaded 1
    module load allinea$allinea_version_saved
  }
  if {$craype_load_default} { 
    setenv craype_already_loaded 0
    module load craype$craype_version_saved
  } else {
    setenv craype_already_loaded 1
    module swap craype$craype_version_saved
  }
  
  set mod_list [lsearch -inline -not -all -exact $mod_list "craype"]
  set mod_list [lsearch -inline -not -all -exact $mod_list "allinea"]

  if {[info exists env(CRAYPE_NETWORK_TARGET)] == 0} {
      module load craype-network-aries
  }

  # Define PE modules to swap
  # At some point this set can go away, as all
  # PE modules will add themselves to CRAY_PE_MODULES
  # and thus be added to swap_list in the foreach block
  # that follows
  set swap_list {
    cray-ga \
    cray-hdf5 \
    cray-hdf5-parallel \
    cray-mpich \
    cray-netcdf \
    cray-netcdf-hdf5parallel \
    cray-parallel-netcdf \
    cray-petsc \
    cray-petsc-complex \
    cray-tpsl \
    cray-trilinos \
    fftw
  }
  
  # Add anything in CRAY_PE_MODULES isn't already 
  # in swap_list.
  foreach mod [split $pe_modules :] {
    if { [expr [lsearch -glob $swap_list $mod] < 0]} {
      lappend swap_list $mod
    }
  }

  # Add site modules to list that will be swapped
  if {[expr [llength $site_module_names] > 0]} {
    lappend swap_list [split $site_module_names :]
    join $swap_list
  }
  

  # Now do the actual swapping
  if {[module-info mode load] ||
       [module-info mode switch2] ||
       [module-info mode display]} {

    foreach mod $swap_list {
      set loaded [split $env(LOADEDMODULES) :]

      if {[is-loaded $mod]} {
        set mod_loaded [lindex $loaded [lsearch -glob $loaded $mod*]]
        module swap $mod $mod_loaded
      }
    }
  }

  # Now load 'mod_list'
  foreach prod $mod_list {
    foreach path $mod_paths {
      if {[file exists $path/$prod]} {
        module load $prod
        break
      }
    }
  }

  # Remove CrayPE  & CCE if they weren't load before the PrgEnv
  if {$env(craype_already_loaded) != 1 && [module-info mode remove]} {
    module unload craype
  }
  if {$env(allinea_already_loaded) != 1 && [module-info mode remove]} {
    module unload allinea 
  }
}

